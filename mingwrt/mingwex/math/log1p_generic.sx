/*
 * log1p_generic.sx
 *
 * Generic wrapper for implementation entry stubs for each of the log1p(),
 * log1pl(), and log1pf() functions.
 *
 * $Id$
 *
 * Written by Keith Marshall <keith@users.osdn.me>
 * Copyright (C) 2016, 2022, MinGW.OSDN Project
 *
 * Adapted from original code written by J. T. Conklin <jtc@netbsd.org>,
 * with modifications by Ulrich Drepper <drepper@cygnus.com>, to improve
 * accuracy in the computation of log1p(x) as x --> 0.0.  This wrapper
 * provides only definitions for derivation of the implementations by
 * inclusion of the log_generic.sx source file.
 *
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
#undef ___function

/* Each of the log1p(), log1pf(), and log1pl() functions returns a natural
 * logarithm; this may be computed directly, using either the FYL2X, or the
 * FYL2X1P instruction, by setting the scaling factor (y) to the natural
 * logarithm of two.
 */
#define __fldy  fldln2

/* The first step is to identify the primary entry point name, and associated
 * back-end names, for each of the three supported functions, (each of which is
 * to be assembled separately, using a GCC command of the form:
 *
 *    gcc -c -D_<function>_source log1p_generic.sx -o <function>.o
 *
 * to create the three entry stubs, with appropriate mappings to the back-end
 * implementation provided by log_generic.sx
 */
#if defined _log1p_source
# define ___function     _log1p 	/* log1p() function entry point name */
# define ___x87cvt     ___x87cvt	/* return value conversion helper */
# define __fldx           fldl		/* FLD instruction to load x value */

#elif defined _log1pl_source
# define ___function     _log1pl 	/* log1pl() function entry point name */
# define __fldx           fldt		/* FLD instruction to load x value */

#elif defined _log1pf_source
# define ___function     _log1pf 	/* log1pf() function entry point name */
# define ___x87cvt     ___x87cvtf	/* return value conversion helper */
# define __fldx           flds		/* FLD instruction to load x value */
#endif

/* Each of the log1p(), log1pf(), and log1pl() functions shares a common
 * back-end implementation, which is distinct from the log_generic.sx default;
 * redirect it accordingly.
 */
#define ___x87log      ___x87log1p	/* redirected back-end implementation */
#define ___x87log_chk  ___x87log1p_chk	/* input value validation helper */

/* Actual implementation of the entry point stubs, and corresponding back-end
 * implementation in terms of the preceding definitions, is delegated to the
 * log_generic.sx source file.
 */
#include "log_generic.sx"

/* vim: set autoindent filetype=asm formatoptions=croql: */
/* $RCSfile$: end of file */
